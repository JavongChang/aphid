proc string[] proxyPaint_GetMenuItemNames()
{
    string $items[] = {"proxyPaint_menu_item_01"};    
    return $items;
}

proc proxyPaint_appendMenuItems(string $master)
{
    menuItem -p $master -l "Proxy Paint" -subMenu true proxyPaint_menu_item_01;
    menuItem -l "Create Proxy Viz On Selected Mesh" -c "proxyPaint_cviz";
    menuItem -l "Connect Ground To Viz" -c "proxyPaintTool -cgm";
    menuItem -l "Paint Tool" -c "proxyPaint_comb";
    menuItem -l "Save Cache" -c "proxyPaintTool -scf `fileDialog -m 1`";
    menuItem -l "Load Cache" -c "proxyPaintTool -lcf `fileDialog -m 0`";
    menuItem -l "Convert Selected Viz To Instancer" -c "proxyPaint_instance";
    menuItem -l "Convert Locators To Objects" -c "proxyPaint_realize";
    menuItem -l "Display Select As" -subMenu true;
    menuItem -l "BoundingBox" -c "proxyPaint_display(0)";
    menuItem -l "Particles" -c "proxyPaint_display(1)";
    menuItem -l "Instancer BoundingBoxes"  -c "proxyPaint_display(2)";    
    setParent -menu ..;
    menuItem -l "Clean Up" -c "proxyPaint_cleanupPPC";
}

global proc proxyPaintRemoveMenus()
{
    string $items[] = proxyPaint_GetMenuItemNames();
    zCustomizeMenus_RemoveFromMaster($items);
}

global proc proxyPaintMakeMenus()
{
    string $masterMenu = zCustomizeMenus_FindMaster();
    if($masterMenu == "") 
        return;
    
    proxyPaint_appendMenuItems($masterMenu);
}

global proc int proxyPaint_getNodeVersion(string $node)
{
// differentiate v2.0
    if(`attributeExists ecl $node`) return 1;
    return 2;
}

global proc proxyPaint_cviz()
{
    string $sel[] = `ls -sl -type transform`;
    if(size($sel) < 1) {
        print("To create a proxy viz, you must select the object to be instanced(replaced).");
        return;
    }
    string $obj2instance = $sel[0];
    string $viz = `createNode proxyViz`;
    string $trans = firstParentOf($viz);
    $trans = `rename $trans ($obj2instance+"_Viz")`;
    connectAttr ($obj2instance+".boundingBoxMinX") ($viz+".bbmnx");
    connectAttr ($obj2instance+".boundingBoxMinY") ($viz+".bbmny");
    connectAttr ($obj2instance+".boundingBoxMinZ") ($viz+".bbmnz");
    connectAttr ($obj2instance+".boundingBoxMaxX") ($viz+".bbmxx");
    connectAttr ($obj2instance+".boundingBoxMaxY") ($viz+".bbmxy");
    connectAttr ($obj2instance+".boundingBoxMaxZ") ($viz+".bbmxz");
    string $tail = `createNode -n "dummy" transform`;
    connectAttr -f ($viz +".outValue") ($tail+".translateX");
    parent $tail $trans;
}

global proc proxyPaint_comb()
{
	string $t = `proxyPaintToolContext`;
	setToolTo $t;
}

proc string[] proxyPaint_allPerspCameras()
{
    string $allCam[] = `ls -type camera`;
    string $perspCam[];
    int $i = 0;
    string $aCam;
    for($aCam in $allCam) {
        if(`getAttr ($aCam +".orthographic")` == 0) {
            $perspCam[$i] = $aCam;
            $i++;
        }
    }
    return $perspCam;
}

global proc proxyPaint_instance()
{
    pickWalk -d down;
    string $viz[] = `ls -sl -l -type locator`;
    if(size($viz) < 1) {
        print("must select a proxyViz to convert to particle"); 
        return;
    }
    
    if(`nodeType $viz[0]` != "proxyViz") {
        print("must select a proxyViz to convert to particle"); 
        return;
    }
    
    int $nodeVer = proxyPaint_getNodeVersion($viz[0]);
    
    //If such a window already exists, destory it.
    if ( (`window -exists proxyPaint_Note`) == true ) deleteUI proxyPaint_Note;
 
//Create the window.
	window -title ("Convert " + firstParentOf($viz[0]) + " To Instancer 1.2 Monday June 4 2012")  -wh 480 320 proxyPaint_Note;
	
		//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $bline = `columnLayout -adjustableColumn true`;//  -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form -cr on`;

	columnLayout -adjustableColumn true -p $scroll;
	text -label ("Plugin Version: "+$nodeVer) -align left;
	checkBox -l "View Dependent" -cc "proxyPaint_checkLODControls" -v 0 proxyPaint_viewDependentCheck;
	optionMenuGrp -en 0 -label "Through Camera" -ann $viz[0] -columnWidth 2 240 -cc "proxyPaint_connectCamera" proxyPaint_cameraGrp;
	
	string $perspCams[] = proxyPaint_allPerspCameras();
	string $aperspCam;
	for($aperspCam in $perspCams) {
	    menuItem -label $aperspCam;
	}
	
	attrFieldSliderGrp -en 0 -min 0.001 -max 2.0 -at ($viz[0]+".lodGateMax") proxyPaint_lodMax;
	attrFieldSliderGrp -en 0 -min 0.0 -max 0.999 -at ($viz[0]+".lodGateMin") proxyPaint_lodMin;
	intFieldGrp -en 0 -numberOfFields 2 -label "Frame Start/End" -value1 `playbackOptions -q -min` -value2 `playbackOptions -q -max` proxyPaint_frameRange;
	if($nodeVer == 1)
	    textFieldButtonGrp -en 0 -l "Blocker" -bl "Add Selected" -bc "proxyPaint_addBlocker" proxyPaint_blockerEdit;
	
	text -l "";
	text -l "Object(s) to be Instanced(Replaced)";
	textScrollList -ams on proxyPaint_targetList;
	rowLayout -numberOfColumns 2 -cw 1 200 -cw 2 200;
	button -l "Add Selected" -c "proxyPaint_addTarget";
	setParent..;
	text -l "";
	setParent..;
	rowColumnLayout -numberOfColumns 3 -p $bline;
	button -l "Create Instancer" -c "proxyPaint_convert";
	button -l "Close" -c "deleteUI proxyPaint_Note";
	setParent..;
	
	formLayout -edit
        -attachNone  $bline     "top"
        -attachForm     $bline     "left"   2
        -attachForm    $bline     "bottom" 2
        -attachForm     $bline     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm    $scroll "left"   2
        -attachControl    $scroll "bottom" 2 $bline
        -attachForm     $scroll "right"  2
    $form;
	
	showWindow proxyPaint_Note;
	
	proxyPaint_connectCamera();
	proxyPaint_checkLODControls();
}

global proc proxyPaint_addBlocker()
{
    string $viz = `optionMenuGrp -q -ann proxyPaint_cameraGrp`;
    int $nodeVer = proxyPaint_getNodeVersion($viz);
	if($nodeVer > 1) return;
    pickWalk -d down;
    string $sel[] = `ls -sl -l -type mesh`;
    if(size($sel) > 0)
        textFieldButtonGrp -e -text $sel[0] proxyPaint_blockerEdit;
}

global proc proxyPaint_connectCamera()
{
    string $viz = `optionMenuGrp -q -ann proxyPaint_cameraGrp`;
    string $cam = `optionMenuGrp -q -v proxyPaint_cameraGrp`;
    
    print("connect "+$cam+" to "+$viz+"\n");
    
    int $nodeVer = proxyPaint_getNodeVersion($viz);
    if($nodeVer == 1)
        connectAttr -f ($cam + ".worldInverseMatrix") ($viz + ".cameraSpace");
    else 
        connectAttr -f ($cam + ".worldMatrix") ($viz + ".cameraSpace");
    
    connectAttr -f ($cam + ".horizontalFilmAperture") ($viz + ".horizontalFilmAperture");
    connectAttr -f ($cam + ".verticalFilmAperture") ($viz + ".verticalFilmAperture");
    connectAttr -f ($cam + ".focalLength") ($viz + ".focalLength");
}

proc string proxyPaint_datetimeAsString()
{
    python("import datetime");
    return python("datetime.datetime.now().strftime('%y%m%dT%H%M%S%m')");
}

proc proxyPaint_bakeInParticle(string $bakeName, string $particle, string $grp)
{
    string $cache = `createNode particleProxyCache`;
    setAttr -type "string" ($cache + ".cachePath") $bakeName;
    string $dummy = `createNode transform`;
    connectAttr ($cache + ".outValue") ($dummy+".translateY") ; 
    connectAttr ($particle +".position") ($cache+".outPosition"); 
    connectAttr ($particle +".scalePP") ($cache+".outScale");
    connectAttr ($particle +".rotationPP") ($cache+".outRotation");
    parent $dummy $grp;
    delete $cache;
}

proc string proxyPaint_genPaticle(string $viz, int $start, int $end, string $grp)
{
    int $ninst = `proxyPaintTool -gpk $viz`;
    if($ninst < 1) {
        print "\n zero particle count";
        return "";
    }
    
    string $par[] = `particle -jbp 0 0 0 -nj $ninst -jr 1 -c 1`;
    setAttr ($par[1]+".isDynamic") 0;
    setAttr ($par[1]+".startFrame") -999;
    addAttr -ln "scalePP0"  -dt vectorArray $par[1];
    addAttr -ln "scalePP"  -dt vectorArray $par[1];
    addAttr -ln "rotationPP0"  -dt vectorArray $par[1];
    addAttr -ln "rotationPP"  -dt vectorArray $par[1];
    connectAttr ($par[1]+".position") ($viz+".outPosition"); 
    connectAttr ($par[1]+".scalePP") ($viz+".outScale");
    connectAttr ($par[1]+".rotationPP") ($viz+".outRotation");
    
    currentTime $start;
    print ("instancer count " + $ninst + "\n");
    
    disconnectAttr ($par[1]+".position") ($viz+".outPosition"); 
    disconnectAttr ($par[1]+".scalePP") ($viz+".outScale");
    disconnectAttr ($par[1]+".rotationPP") ($viz+".outRotation");
    
    setAttr ($par[0] + ".visibility") 0;
    saveInitialState $par[1];

    parent $par[0] $grp;
        
    return $par[1];
}

global proc proxyPaint_convert()
{
    string $viz = `optionMenuGrp -q -ann proxyPaint_cameraGrp`;
    int $nodeVer = proxyPaint_getNodeVersion($viz);
	if($nodeVer == 1) {
	    proxyPaint_legacyConvert();
	    return;
	}
	
	string $vizname = firstParentOf($viz);
    int $numInstancer = `textScrollList -q -numberOfItems proxyPaint_targetList`;
    setAttr ($viz+".nis") $numInstancer;
    
    string $instancers[] = `textScrollList -q -ai proxyPaint_targetList`;
    
    int $start = `intFieldGrp -q -value1 proxyPaint_frameRange`;
    int $end = `intFieldGrp -q -value2 proxyPaint_frameRange`;
    if(!`intFieldGrp -q -en proxyPaint_frameRange`)
        $end = $start+2;
    
    float $lodmax = `getAttr ($viz+".lodGateMax")`;
    float $lodmin = `getAttr ($viz+".lodGateMin")`;
    string $grp = `createNode -n ($vizname + "_instLOD_"+$lodmax+"_to_"+$lodmin+"_") transform`;
    string $pgrp = `createNode -n "particles" -p $grp transform`;
    
    int $iInstancer = 0;
    for($iInstancer = 0; $iInstancer < $numInstancer; $iInstancer++) {
        setAttr ($viz+".iis") $iInstancer;
        
        int $iFrame = $start - 1;
        currentTime $iFrame;
        
        proxyPaintTool -bpk $viz;
        
        for($iFrame = $start; $iFrame <= $end; $iFrame++) {
            currentTime $iFrame;
            proxyPaintTool -dpk $viz;
        }

        string $particle = proxyPaint_genPaticle($viz, $start, $end, $pgrp);
        
        proxyPaintTool -epk $viz;
        
        if($particle == "") continue;
        
        string $aInstancer = $instancers[$iInstancer];
        
        print(" proxy viz replacing " + `particle -q -count $particle` + " " + $aInstancer + "\n");
        
        string $replacer = `particleInstancer -addObject -object $aInstancer -cycle None -cycleStep 1 -cycleStepUnits Frames -levelOfDetail BoundingBoxes -rotationUnits Radians -rotationOrder XYZ -position worldPosition -scale scalePP -rotation rotationPP $particle`;
        parent $replacer $grp;
    } 
    
    currentTime $start;
}

proc string proxyPaint_legacyGenPaticle(string $viz, int $start, int $end, string $grp)
{
    string $par[] = `particle -jbp 0 0 0 -nj 100 -jr 1 -c 1`;
    setAttr ($par[1]+".isDynamic") 0;
    setAttr ($par[1]+".startFrame") -999;
    addAttr -ln "scalePP0"  -dt vectorArray $par[1];
    addAttr -ln "scalePP"  -dt vectorArray $par[1];
    addAttr -ln "rotationPP0"  -dt vectorArray $par[1];
    addAttr -ln "rotationPP"  -dt vectorArray $par[1];
    connectAttr ($par[1]+".position") ($viz+".outPosition"); 
    connectAttr ($par[1]+".scalePP") ($viz+".outScale");
    connectAttr ($par[1]+".rotationPP") ($viz+".outRotation");
    
    string $bakeName = `getAttr ($viz+".cachePath")`;
    $bakeName = $bakeName + proxyPaint_datetimeAsString() + ".par";
    
    setAttr -type "string" ($viz + ".bakePath") $bakeName;

    currentTime $end;
    
    int $ninst = `getAttr ($viz + ".ov")`;
    $ninst = $ninst + 1;
    
    setAttr -type "string" ($viz + ".bakePath") "";
    
    currentTime $start;

    print ("instancer count " + $ninst + "\n");
    delete $par[0];
    
    $par = `particle -jbp 0 0 0 -nj $ninst -jr 1 -c 1`;
    setAttr ($par[1]+".isDynamic") 0;
    setAttr ($par[1]+".startFrame") -999;
    addAttr -ln "scalePP0"  -dt vectorArray $par[1];
    addAttr -ln "scalePP"  -dt vectorArray $par[1];
    addAttr -ln "rotationPP0"  -dt vectorArray $par[1];
    addAttr -ln "rotationPP"  -dt vectorArray $par[1];
    
    proxyPaint_bakeInParticle($bakeName, $par[1], $grp);
    
    setAttr ($par[0] + ".visibility") 0;

    currentTime ($start + 1);
    
    saveInitialState $par[1];

    parent $par[0] $grp;
        
    return $par[1];
}

global proc proxyPaint_legacyConvert()
{
    string $viz = `optionMenuGrp -q -ann proxyPaint_cameraGrp`;
    string $blocker = `textFieldButtonGrp -q -text proxyPaint_blockerEdit`;
	if($blocker == "")
	    $blocker = "nil";
	proxyPaintTool -bl $blocker -v $viz;
    
    string $vizname = firstParentOf($viz);
    int $numInstancer = `textScrollList -q -numberOfItems proxyPaint_targetList`;
    setAttr ($viz+".nis") $numInstancer;
    
    string $instancers[] = `textScrollList -q -ai proxyPaint_targetList`;
    
    int $start = `intFieldGrp -q -value1 proxyPaint_frameRange`;
    int $end = `intFieldGrp -q -value2 proxyPaint_frameRange`;
    if(!`intFieldGrp -q -en proxyPaint_frameRange`)
        $end = $start+2;
    
    currentTime ($start+1);
    setAttr ($viz+".stt") 1;
    currentTime $start;
    setAttr ($viz+".stt") 0;
    
    float $lodmax = `getAttr ($viz+".lodGateMax")`;
    float $lodmin = `getAttr ($viz+".lodGateMin")`;
    string $grp = `createNode -n ($vizname + "_instLOD_"+$lodmax+"_to_"+$lodmin+"_") transform`;
    string $pgrp = `createNode -n "particles" -p $grp transform`;
    
    int $iInstancer = 0;
    for($iInstancer = 0; $iInstancer < $numInstancer; $iInstancer++) {
        setAttr ($viz+".iis") $iInstancer;
        
        if($iInstancer == 0) {
            int $iFrame = 0;
            for($iFrame = $start; $iFrame <= $end; $iFrame++) {
                currentTime $iFrame;
            }
        }
        
        string $particle = proxyPaint_legacyGenPaticle($viz, $start, $end, $pgrp);
        
        string $aInstancer = $instancers[$iInstancer];
        
        print("proxy viz replacing " + `particle -q -count $particle` + " " + $aInstancer + "\n");
        
        string $replacer = `particleInstancer -addObject -object $aInstancer -cycle None -cycleStep 1 -cycleStepUnits Frames -levelOfDetail BoundingBoxes -rotationUnits Radians -rotationOrder XYZ -position worldPosition -scale scalePP -rotation rotationPP $particle`;
        parent $replacer $grp;
    } 
    
    currentTime $start;
}

global proc proxyPaint_addTarget()
{
    textScrollList -e -ra proxyPaint_targetList;
    string $sel[] = `ls -sl -type transform`;
    string $at;
    for($at in $sel) {
        textScrollList -e -append $at proxyPaint_targetList;
    }
}

global proc proxyPaint_display(int $mode)
{
    string $sel[] = `ls -sl -type transform`;
    string $nodes[] = `listRelatives -f -ad $sel`;
    string $anode;
    for($anode in $nodes) {
        string $typ = `nodeType $anode`;
        if($mode == 0) {
            if($typ == "particle") {
                string $trans = firstParentOf($anode);
                setAttr ($trans + ".visibility") 0;
            }
            if($typ == "instancer") {
                setAttr ($anode + ".levelOfDetail") 2;
            }
        }
        else if($mode == 1) {
            if($typ == "particle") {
                string $trans = firstParentOf($anode);
                setAttr ($trans + ".visibility") 1;
            }
            if($typ == "instancer") {
                setAttr ($anode + ".levelOfDetail") 2;
            }
        }
        else if($mode == 2) {
            if($typ == "particle") {
                string $trans = firstParentOf($anode);
                setAttr ($trans + ".visibility") 0;
            }
            if($typ == "instancer") {
                setAttr ($anode + ".levelOfDetail") 1;
            }
        }
    }
}

global proc proxyPaint_checkLODControls()
{
    string $viz = `optionMenuGrp -q -ann proxyPaint_cameraGrp`;
    
    int $enable = `checkBox -q -v proxyPaint_viewDependentCheck`;
    int $nodeVer = proxyPaint_getNodeVersion($viz);
	
    optionMenuGrp -e -en $enable proxyPaint_cameraGrp;
    attrFieldSliderGrp -e -en $enable proxyPaint_lodMax;
    attrFieldSliderGrp -e -en $enable proxyPaint_lodMin;
    intFieldGrp -e -en $enable proxyPaint_frameRange;
    
    if($nodeVer == 1) {
        setAttr ($viz + ".ecl") $enable;
        textFieldButtonGrp -e -en $enable proxyPaint_blockerEdit;
    }
}

global proc proxyPaint_cleanupPPC()
{
    string $appc; 
    string $ppcs[] = `ls -type particleProxyCache`;
    for($appc in $ppcs) {
        print("delete particle cache node "+$appc+"\n");
        delete $appc;
    }
    saveInitialState -all;   
}

global proc proxyPaint_realize()
{
    string $sel[] = `ls -sl -type transform`;
    if(size($sel) < 2) {
        print "select source object then shift-select group of locators to convert!";
        return;
    }
    
    string $src = $sel[0];
    
    select -r $sel[1];
    select -hi;
    string $loc[] = `ls -sl -l -type locator`;
    if(size($loc) < 1) {
        print "no locator in the second group!";
        return;
    }
    
    string $tgts[], $t[];
    string $aloc;
    int $it = 0;
    for($aloc in $loc) {
        $t = `listRelatives -p $aloc`;
        $tgts[$it] = $t[0];
        $it++;
    }
    print("convert count: "+$it + "\n");
    
    string $atgt, $dst;
    for($atgt in $tgts) {
        $t = `duplicate -rr $src`;
        $dst = $t[0];
        parent $dst $atgt;
        xform -a -ro 0 0 0 -t 0 0 0 -s 1 1 1 $dst;
    }
}

