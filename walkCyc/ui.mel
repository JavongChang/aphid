proc float walkcyc_getTranslate(string $trans, int $dim)
{
    float $t[] = `xform -q -t $trans`;
    return $t[$dim];
}

proc float[] walkcyc_getTranslate3(string $trans)
{
    float $t[] = `xform -q -ws -t $trans`;
    return $t;
}

proc float distance_between(float $a[], float $b[])
{
    vector $v3 = <<$a[0] - $b[0], $a[1] - $b[1], $a[2] - $b[2]>>;
    float $res = mag($v3);
    return $res;
}

proc float orientation_between(float $a[], float $b[], int $dim)
{
    vector $v3 = <<$a[0] - $b[0], $a[1] - $b[1], $a[2] - $b[2]>>;
    $v3 = $v3 / mag($v3);
    float $angdeg;
    if($dim == 2) {
        $angdeg = acos($v3.z) / 3.14 * 180;
        if($v3.x < 0) $angdeg = -$angdeg;
    }
    else {
        $angdeg = acos($v3.x) / 3.14 * 180;
        if($v3.z < 0) $angdeg = -$angdeg;
    }
    
    return $angdeg;
}

global proc calc_walkcyc()
{
    int $stepMin = `intFieldGrp -q -v1 walkcycStepRange`;
    int $stepMax = `intFieldGrp -q -v2 walkcycStepRange`;
    print("step range from " + $stepMin + " to " + $stepMax);
    
    if($stepMax <= $stepMin) {
        print("invalid step min/max");
        return;
    }
    
    string $leftFoot = `textFieldButtonGrp -q -text walkcycLeftFootGrp`;
    if(`objExists $leftFoot` != 1) {
        print("invalid left foot");
        return;
    }
    
    string $rightFoot = `textFieldButtonGrp -q -text walkcycRightFootGrp`;
    if(`objExists $rightFoot` != 1) {
        print("invalid right foot");
        return;
    }
    
    string $overall = `textFieldButtonGrp -q -text walkcycOverAllGrp`;
    if(`objExists $overall` != 1) {
        print("invalid body");
        return;
    }
    
    string $character = `textFieldButtonGrp -q -text walkcycCharacterGrp`;
    if(`objExists $character` != 1) {
        print("invalid character");
        return;
    }
    
    string $clip = `textFieldButtonGrp -q -text walkcycClipGrp`;
    if(`objExists $character` != 1) {
        print("invalid walk cycle clip");
        return;
    }
    
    int $dim = `radioButtonGrp -q -select walkcycFrontFacingGrp`;
    if($dim == 1) $dim = 0;
    else if($dim == 2) $dim = 2;
    
    float $sumLeft = 0.0;
    float $sumRight = 0.0;
    float $preLeft = walkcyc_getTranslate($leftFoot, $dim);
    float $preRight = walkcyc_getTranslate($rightFoot, $dim);
    float $curLeft;
    float $curRight;
    
    int $i;
    for($i = $stepMin; $i <= $stepMax; $i++) {
        currentTime $i;
        $curLeft = walkcyc_getTranslate($leftFoot, $dim);
        $curRight = walkcyc_getTranslate($rightFoot, $dim);
        
        if($curLeft < $preLeft)
            $sumLeft = $sumLeft + ($preLeft - $curLeft);
            
        if($curRight < $preRight)
            $sumRight = $sumRight + ($preRight - $curRight);
            
        $preLeft = $curLeft;
        $preRight = $curRight;
    }
    
    print("sum left " + $sumLeft + "\n");
    print("sum right " + $sumRight + "\n");
    
    float $stepDistance = $sumLeft + $sumRight;
    float $stepPeriod = $stepMax - $stepMin;
    
    string $clipSrc = $clip;
    print("copy src clip " + $clipSrc);
    clip -copy $clipSrc;
    
    int $frameMin = `playbackOptions -q -min`;
    int $frameMax = `playbackOptions -q -max`;

    float $preOverall[] =  walkcyc_getTranslate3($overall);
    float $curOverall[];
    float $delta = 0.0;
    string $preClip;
    string $tmp[];
    int $setpBegin = $frameMin;
    int $iStep = 0;
    
    progressWindow
         -title "Doing Nothing"
         -progress 0
         -status "Sleeping: 0%"
         -isInterruptable true;
    
    
    for($i = $frameMin; $i <= $frameMax; $i++) {

        currentTime $i;
        if($i == $frameMin) {
            $tmp = `clip -pi -s $i $character`;
            $preClip = $tmp[0];
            print("step" + $iStep + " at frame " + $i + "\n");
            $iStep++;
        }
        
        $curOverall = walkcyc_getTranslate3($overall);
        
        $delta = $delta + distance_between($curOverall, $preOverall);
        
        if($delta >= $stepDistance) {
            float $stepScale = ($i - $setpBegin) / $stepPeriod;
            setAttr ($preClip+".scale") $stepScale;
            $delta = 0;
            $tmp = `clip -pi -s $i $character`;
            $preClip = $tmp[0];
            $setpBegin = $i;
            print("step" + $iStep + " at frame " + $i + "\n");
            $iStep++;
            float $existingKey[] = `keyframe  -t $i -q  ($overall + ".rotateY")`;
            if(size($existingKey) < 1) {
                float $orient = orientation_between($curOverall, $preOverall, $dim);
                setKeyframe -value $orient ($overall + ".rotateY");
            }
        }
        $preOverall = $curOverall;
        
        if ( `progressWindow -query -isCancelled` ) break;
        
        float $pec = ($i - $frameMin) / ($frameMax - $frameMin) * 100;
        progressWindow -edit
            -status ("Calculating Steps: "+$pec+"%")
             -progress $pec;
        
    }
    
    progressWindow -endProgress;
}

global proc set_walkcycControl(string $ctl)
{
    string $sel[] = `ls -l -sl -type "transform"`;
    if(size($sel) < 1) {
        print("select transform of " + `textFieldButtonGrp -q -ann $ctl`);
        return;
    }
    
    textFieldButtonGrp -e -text $sel[0] $ctl;
}

global proc set_walkcycCharacter(string $char)
{
    string $sel[] = `ls -l -sl -type "character"`;
    if(size($sel) < 1) {
        print("must select a character\n ");
        return;
    }
    
    textFieldButtonGrp -e -text $sel[0] $char;
}

global proc set_walkcycClip(string $char)
{
    string $sel[] = `ls -l -sl -type "animClip"`;
    if(size($sel) < 1) {
        print("must select a clip\n ");
        return;
    }
    
    textFieldButtonGrp -e -text $sel[0] $char;
}

global proc create_walkcycClip(string $ctl)
{
    string $character = `textFieldButtonGrp -q -text walkcycCharacterGrp`;
    if(`objExists $character` != 1) {
        print("invalid character");
        return;
    }
    
    int $stepMin = `intFieldGrp -q -v1 walkcycStepRange`;
    int $stepMax = `intFieldGrp -q -v2 walkcycStepRange`;
    print("step range from " + $stepMin + " to " + $stepMax);
    string $clip[] = `clip -sc 1 -startTime $stepMin -endTime $stepMax -name "step" $character`;
    string $clipSrc = `clip -q -scn $clip[0]`;
    textFieldButtonGrp -e -text $clipSrc walkcycClipGrp;
}

global proc walkcyc_main()
{
//If such a window already exists, destory it.
 if ( (`window -exists walkcycWin`) == true ) deleteUI walkcycWin;
 
//Create the window.
 window -title "Walk Cycle Configurations - 1.1 November 16, 2012" -wh 400 300  -mb false walkcycWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true;

//column begin
    textFieldButtonGrp
     -cw 1 110 -label "Character" -buttonLabel "Use Selected"
	 -bc "set_walkcycCharacter(\"walkcycCharacterGrp\")"
	 -ann "character"
	 -text "character1"
     walkcycCharacterGrp;
     
    intFieldGrp -nf 2 -l "Walk Cycle Time Min/Max" -v1 1 -v2 24 
     walkcycStepRange;
     
    button -l "Create Walk Cycle Clip" -c "create_walkcycClip(\"walkcycCharacterGrp\")";
     
    textFieldButtonGrp
     -cw 1 110 -label "Walk Cycle Clip Source" -buttonLabel "Use Selected"
	 -bc "set_walkcycClip(\"walkcycClipGrp\")"
	 -ann "clip"
	 -text ""
     walkcycClipGrp;
     
    textFieldButtonGrp
     -cw 1 110 -label "Left Foot" -buttonLabel "Use Selected"
	 -bc "set_walkcycControl(\"walkcycLeftFootGrp\")"
	 -ann "left foot"
	 -text "|group2|group1|pCube2"
     walkcycLeftFootGrp;
     
    textFieldButtonGrp
     -cw 1 110 -label "Right Foot" -buttonLabel "Use Selected"
	 -bc "set_walkcycControl(\"walkcycRightFootGrp\")"
	 -ann "right foot"
	 -text "|group2|group1|pCube1"
     walkcycRightFootGrp;
     
    textFieldButtonGrp
     -cw 1 110 -label "Overall Control" -buttonLabel "Use Selected"
	 -bc "set_walkcycControl(\"walkcycOverAllGrp\")"
	 -ann "body"
	 -text "|group2|pCube3"
     walkcycOverAllGrp;
     
    radioButtonGrp -numberOfRadioButtons 2
     -label "Front Facing" -labelArray2 "+X" "+Z" -select 2
     walkcycFrontFacingGrp;
     
//row begin
//button -l "Load" -c "calc_walkcyc; deleteUI walkcycWin"-p $row;
button -l "Apply" -c "calc_walkcyc" -p $row;
button -l "Close" -c "deleteUI walkcycWin" -p $row;

formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm    $row     "bottom" 2
        -attachForm     $row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm    $scroll "left"   2
        -attachControl    $scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow walkcycWin;
}


